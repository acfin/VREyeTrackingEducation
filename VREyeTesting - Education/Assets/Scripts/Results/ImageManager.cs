using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices.ComTypes;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
//using UnityEditor.Scripting.Python;
using UnityEditor;
using System.Diagnostics;
using System;

public class ImageManager : MonoBehaviour
{
    [SerializeField] Image testImage;
    [SerializeField] TMP_Dropdown listSelector;
    List<Sprite> lastTestImages = new List<Sprite>();
    List<Sprite> longTermImages = new List<Sprite>();

    int recentIndex = 0;
    int longTermIndex = 0;
    // Start is called before the first frame update
    void Start()
    {
        string path = "ImageGeneration";
        PlayerPrefs.SetString("Name","John Doe");
        DirectoryInfo d = new DirectoryInfo("PatientResults\\" + PlayerPrefs.GetString("Name"));
        DeleteImages(path);
        UnityEngine.Debug.Log(run_cmd(path + "\\SubplotGenerator.py", PlayerPrefs.GetString("Name"), d.FullName));
        //DirectoryInfo dir = new DirectoryInfo("");

        string filename = path + "\\recent1.png";

        LoadImages(path);
        testImage.sprite = lastTestImages[recentIndex];
    }

    void DeleteImages(string path)
    {
        DirectoryInfo d = new DirectoryInfo(path);

        FileInfo[] files = d.GetFiles();
        foreach(FileInfo file in d.GetFiles("*.png"))
        {
            UnityEngine.Debug.Log("Deleting " + file.FullName);
            File.Delete(file.FullName);
        }
    }

    void LoadImages(string path)
    {
        DirectoryInfo d = new DirectoryInfo(path);
        UnityEngine.Debug.Log("Path is" + d.FullName);

        FileInfo[] recentFiles = d.GetFiles("recent*.png");
        FileInfo[] longTermFiles = d.GetFiles("longterm*.png");
        foreach (FileInfo File in recentFiles)
        {
            lastTestImages.Add(GetImage(File.FullName));
        }
        foreach (FileInfo File in longTermFiles)
        {
            longTermImages.Add(GetImage(File.FullName));
        }
    }

    Sprite GetImage(string filename)
    {
        Texture2D tex = null;
        byte[] fileData;
        if (File.Exists(filename))
        {
            UnityEngine.Debug.Log("File Found");
            fileData = File.ReadAllBytes(filename);
            tex = new Texture2D(2, 2);
            tex.LoadImage(fileData); //..t$$anonymous$$s will auto-resize the texture dimensions.
            Sprite testSprite = Sprite.Create(tex, new Rect(0, 0, tex.width, tex.height), new Vector2(0, 0));
            return testSprite;
        }
        else
        {
            UnityEngine.Debug.Log("File Not Found");
            return null;
        }
    }

    public string run_cmd(string cmd, string argPatientName, string argFileName)
    {
        ProcessStartInfo start = new ProcessStartInfo();
        start.FileName = GetPythonPath();
        start.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\"", cmd, argPatientName, argFileName);
        start.UseShellExecute = false;// Do not use OS shell
        start.CreateNoWindow = true; // We don't need new window
        start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
        start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
        using (Process process = Process.Start(start))
        {
            using (StreamReader reader = process.StandardOutput)
            {
                string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                UnityEngine.Debug.Log("PYTHON ERRORS: " + stderr);
                return "PYTHON OUTPUT: " + result;
            }
        }
    }

    //UI Functions
    public void CycleImageRight()
    {
        if (listSelector.value == 0)
        {
            if (recentIndex < lastTestImages.Count - 1)
            {
                recentIndex++;
            }
            else
            {
                recentIndex = 0;
            }
            testImage.sprite = lastTestImages[recentIndex];
        }
        else if (listSelector.value == 1)
        {
            if (longTermIndex < longTermImages.Count - 1)
            {
                longTermIndex++;
            }
            else
            {
                longTermIndex = 0;
            }
            testImage.sprite = longTermImages[longTermIndex];
        }
        else
        {
            UnityEngine.Debug.Log("Dropdown value is not recognized.");
        }
    }
    public void CycleImageLeft()
    {

        if (listSelector.value == 0)
        {
            if (recentIndex > 0)
            {
                recentIndex--;
            }
            else
            {
                recentIndex = lastTestImages.Count - 1;
            }
            testImage.sprite = lastTestImages[recentIndex];
        }
        else if (listSelector.value == 1)
        {
            if (longTermIndex > 0)
            {
                longTermIndex--;
            }
            else
            {
                longTermIndex = longTermImages.Count - 1;
            }
            testImage.sprite = longTermImages[longTermIndex];
        }
        else
        {
            UnityEngine.Debug.Log("Dropdown value is not recognized.");
        }
    }

    public void SwapImageList()
    {
        if(listSelector.value == 0)
        {
            testImage.sprite = lastTestImages[recentIndex];
        }
        else if (listSelector.value == 1)
        {
            testImage.sprite = longTermImages[longTermIndex];
        }
        else
        {
            UnityEngine.Debug.Log("Dropdown value is not recognized.");
        }
    }

    string GetPythonPath()
    {
        var entries = Environment.GetEnvironmentVariable("path", EnvironmentVariableTarget.User).Split(';');
        string python_location = null;

        foreach (string entry in entries)
        {
            if (entry.ToLower().Contains("python"))
            {
                var breadcrumbs = entry.Split('\\');
                foreach (string breadcrumb in breadcrumbs)
                {
                    if (breadcrumb.ToLower().Contains("python"))
                    {
                        python_location += breadcrumb + '\\';
                        break;
                    }
                    python_location += breadcrumb + '\\';
                }
                break;
            }
        }

        UnityEngine.Debug.Log(python_location);
        string exe = "";
        DirectoryInfo dir = new DirectoryInfo(python_location);
        foreach(DirectoryInfo d in dir.EnumerateDirectories())
        {
            foreach(string p in Directory.EnumerateFiles(d.FullName, "pythonw.exe", SearchOption.TopDirectoryOnly))
            {
                exe = p;
            }
        }
        UnityEngine.Debug.Log(exe);
        return exe;
    }
}
